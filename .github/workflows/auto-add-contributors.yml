name: Auto-Add Contributors

on:
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write

jobs:
  add-contributors:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release information
        id: release_info
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT

      - name: Get contributors for this release
        id: contributors
        run: |
          CURRENT_TAG="${{ steps.release_info.outputs.tag_name }}"
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^${CURRENT_TAG}$" | tail -n1)
          
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
            ALL_TAGS=$(git tag --sort=-version:refname)
            PREVIOUS_TAG=$(echo "$ALL_TAGS" | grep -A1 "^${CURRENT_TAG}$" | tail -n1)
            
            if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
              PREVIOUS_TAG=$(git log --since="30 days ago" --format="%H" | tail -n1)
              if [ -z "$PREVIOUS_TAG" ]; then
                PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
              fi
            fi
          fi
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Extract contributors with their emails
          CONTRIBUTORS=$(git log --format='%an <%ae>' ${PREVIOUS_TAG}..${CURRENT_TAG} | sort -u | while IFS= read -r line; do
            if [ -n "$line" ]; then
              EMAIL=$(echo "$line" | sed 's/.*<\(.*\)>.*/\1/')
              if [[ ! "$EMAIL" =~ ^[0-9]+\+.*@users\.noreply\.github\.com$ ]] && \
                 [[ ! "$EMAIL" =~ [Bb]ot.*@.* ]] && \
                 [[ ! "$EMAIL" =~ .*[Bb]ot@.* ]] && \
                 [[ ! "$EMAIL" =~ no-reply@github\.com ]] && \
                 [[ ! "$EMAIL" =~ noreply@github\.com ]]; then
                echo "$line"
              fi
            fi
          done)
          
          CONTRIBUTORS=$(echo "$CONTRIBUTORS" | grep -v '^$' | sort -u)
          
          if [ -n "$CONTRIBUTORS" ]; then
            # Extract GitHub usernames from emails and git log
            USERNAMES=""
            AVATAR_HTML=""
            
            while IFS= read -r contributor; do
              if [ -n "$contributor" ]; then
                EMAIL=$(echo "$contributor" | sed 's/.*<\(.*\)>.*/\1/')
                USERNAME=""
                
                # Try to extract username from GitHub noreply emails
                if [[ "$EMAIL" =~ ^[0-9]+\+(.+)@users\.noreply\.github\.com$ ]]; then
                  USERNAME="${BASH_REMATCH[1]}"
                elif [[ "$EMAIL" =~ ^(.+)@users\.noreply\.github\.com$ ]]; then
                  USERNAME="${BASH_REMATCH[1]}"
                else
                  # Try to get username from git config or commit author
                  COMMIT_HASH=$(git log --format='%H' --author="$EMAIL" ${PREVIOUS_TAG}..${CURRENT_TAG} | head -n1)
                  if [ -n "$COMMIT_HASH" ]; then
                    # Try to extract from commit message or other git metadata
                    USERNAME=$(git show --format='%an' --no-patch $COMMIT_HASH | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
                  fi
                fi
                
                # If we still don't have a username, try using the name part before @ in email
                if [ -z "$USERNAME" ]; then
                  USERNAME=$(echo "$EMAIL" | cut -d'@' -f1 | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g')
                fi
                
                # Only add if username looks valid (not empty and reasonable length)
                if [ -n "$USERNAME" ] && [ ${#USERNAME} -gt 1 ] && [ ${#USERNAME} -lt 40 ]; then
                  if [ -z "$USERNAMES" ]; then
                    USERNAMES="$USERNAME"
                  else
                    USERNAMES="$USERNAMES,$USERNAME"
                  fi
                  
                  # Add avatar HTML
                  AVATAR_HTML="$AVATAR_HTML<img src=\"https://github.com/$USERNAME.png?size=50\" width=\"50\" height=\"50\" style=\"border-radius: 50%; margin-right: 8px; vertical-align: middle;\" alt=\"$USERNAME\">"
                fi
              fi
            done <<< "$CONTRIBUTORS"
            
            # Remove duplicates from usernames
            USERNAMES=$(echo "$USERNAMES" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
            
            if [ -n "$USERNAMES" ]; then
              # Count contributors
              CONTRIBUTOR_COUNT=$(echo "$USERNAMES" | tr ',' '\n' | wc -l)
              
              # Format the contributor text
              echo "### Contributors" > contributors.txt
              echo "" >> contributors.txt
              echo "$AVATAR_HTML" >> contributors.txt
              echo "" >> contributors.txt
              
              # Format usernames list
              if [ "$CONTRIBUTOR_COUNT" -eq 1 ]; then
                echo "$USERNAMES" >> contributors.txt
              elif [ "$CONTRIBUTOR_COUNT" -eq 2 ]; then
                FIRST=$(echo "$USERNAMES" | cut -d',' -f1)
                SECOND=$(echo "$USERNAMES" | cut -d',' -f2)
                echo "$FIRST and $SECOND" >> contributors.txt
              else
                FIRST=$(echo "$USERNAMES" | cut -d',' -f1)
                SECOND=$(echo "$USERNAMES" | cut -d',' -f2)
                REST=$((CONTRIBUTOR_COUNT - 2))
                echo "$FIRST, $SECOND, and $REST other contributors" >> contributors.txt
              fi
              
              echo "has_contributors=true" >> $GITHUB_OUTPUT
            else
              echo "has_contributors=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_contributors=false" >> $GITHUB_OUTPUT
          fi

      - name: Update CHANGELOG with contributors
        if: steps.contributors.outputs.has_contributors == 'true'
        run: |
          CONTRIBUTOR_TEXT=$(cat contributors.txt)
          VERSION="${{ steps.release_info.outputs.tag_name }}"
          VERSION=${VERSION#v}
          
          cp CHANGELOG.md CHANGELOG.md.bak
          
          awk -v version="$VERSION" '
          BEGIN { 
            in_version_section = 0
            added_contributors = 0
          }
          
          /^## / {
            if ($0 ~ version && added_contributors == 0) {
              print $0
              in_version_section = 1
              next
            } else {
              if (in_version_section && added_contributors == 0) {
                print ""
                while ((getline line < "contributors.txt") > 0) {
                  print line
                }
                close("contributors.txt")
                added_contributors = 1
              }
              in_version_section = 0
              print $0
              next
            }
          }
          
          {
            print $0
          }
          
          END {
            if (in_version_section && added_contributors == 0) {
              print ""
              while ((getline line < "contributors.txt") > 0) {
                print line
              }
              close("contributors.txt")
            }
          }
          ' CHANGELOG.md > CHANGELOG.md.new
          
          mv CHANGELOG.md.new CHANGELOG.md

      - name: Create pull request with contributor updates
        if: steps.contributors.outputs.has_contributors == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add contributors to CHANGELOG for release ${{ steps.release_info.outputs.tag_name }}"
          title: "Add contributors to CHANGELOG for release ${{ steps.release_info.outputs.tag_name }}"
          body: |
            This PR automatically adds contributor acknowledgments to the CHANGELOG for release ${{ steps.release_info.outputs.tag_name }}.
            
            The contributors section has been added to recognize community members who contributed to this release.
          branch: auto-contributors-${{ steps.release_info.outputs.tag_name }}
          delete-branch: true

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f contributors.txt
          rm -f CHANGELOG.md.bak