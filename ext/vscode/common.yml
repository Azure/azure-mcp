parameters:
- name: SkipSigning
  type: boolean
  default: true
- name: PublishPackages
  type: boolean
  default: false
- name: ReleaseRun
  type: boolean
  default: false
- name: RunLiveTests
  type: boolean
  default: false

resources:
  repositories:
  - repository: azure-sdk-build-tools
    type: git
    name: internal/azure-sdk-build-tools
    ref: refs/tags/azure-sdk-build-tools_20250307.1

extends:
  template: /eng/pipelines/templates/1es-redirect.yml
  parameters:
    autoBaseline: ${{ and(eq(variables['Build.DefinitionName'], 'azure - mcp'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.TeamProject'], 'internal')) }}
    stages:
    - stage: Initialize
      pool:
        name: $(LINUXPOOL)
        image: $(LINUXVMIMAGE)
        os: linux
      variables:
      - template: /eng/pipelines/templates/variables/image.yml
      - template: /eng/pipelines/templates/variables/globals.yml
      jobs:
      - template: /eng/pipelines/templates/jobs/initialize.yml
        parameters:
          ReleaseRun: ${{ parameters.ReleaseRun }}
    - stage: Build
      dependsOn:
      - Initialize
      pool:
        name: $(LINUXPOOL)
        image: $(LINUXVMIMAGE)
        os: linux
    - stage: BuildVSIX
      displayName: 'Build and Test VSIX Extension'
      dependsOn:
        - SignAndPack
      pool:
        name: $(LINUXPOOL)
        image: $(LINUXVMIMAGE)
        os: linux
      variables:
        - template: /eng/pipelines/templates/variables/image.yml
        - template: /eng/pipelines/templates/variables/globals.yml
        - name: Version
          value: $[ stageDependencies.Initialize.Initialize.outputs['Version.Version'] ]
      jobs:
        - template: ext/vscode/vscode-build-and-test.yml
          parameters:
            BuildMatrix:
              Windows:
                Pool: $(WINDOWSPOOL)
                ImageKey: image
                OSVmImage: $(WINDOWSVMIMAGE)
                OS: windows
                Variables: {}
              Linux:
                Pool: $(LINUXPOOL)
                ImageKey: image
                OSVmImage: $(LINUXVMIMAGE)
                OS: linux
                Variables:
                  UploadArtifact: 'true'
                  Codeql.Enabled: true
                  Codeql.SkipTaskAutoInjection: false
                  Codeql.BuildIdentifier: vscode_linux
              Mac:
                Pool: Azure Pipelines
                ImageKey: vmImage
                OSVmImage: $(MACVMIMAGE)
                OS: macOS
                Variables: {}

    - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.RunLiveTests, 'true')) }}:
      - stage: Test
        displayName: 'Live test'
        dependsOn:
        - Initialize
        pool:
          name: $(LINUXPOOL)
          image: $(LINUXVMIMAGE)
          os: linux
        variables:
        - template: /eng/pipelines/templates/variables/image.yml
        - template: /eng/pipelines/templates/variables/globals.yml
        - name: TestAreas
          value: $[ stageDependencies.Initialize.Initialize.outputs['GetTestAreas.TestAreas'] ]
        condition: and(succeeded(), eq(dependencies.Initialize.outputs['Initialize.GetTestAreas.HasTestAreas'], 'True'))
        jobs:
        - template: /eng/common/pipelines/templates/jobs/generate-job-matrix.yml
          parameters:
            SparseCheckout: false
            MatrixConfigs:
            - Name: test_matrix
              Path: eng/pipelines/test-matrix.json
              Selection: all
              GenerateVMJobs: true
            JobTemplatePath: /eng/pipelines/templates/jobs/live-test.yml
            AdditionalParameters:
              TimeoutInMinutes: 90
              EnvVars:
                AZURE_POD_IDENTITY_AUTHORITY_HOST: "FakeAuthorityHost"
            CloudConfig:
              Cloud: Public
              ServiceConnection: azure-sdk-tests-public

    # # All builds in the internal project get signing
    - stage: SignAndPack
      ${{ if parameters.SkipSigning }}:
        displayName: 'Pack'
      ${{ else }}:
        displayName: 'Sign and Pack'
      dependsOn:
      - Initialize
      - Build
      variables:
      - template: /eng/pipelines/templates/variables/image.yml
      - template: /eng/pipelines/templates/variables/globals.yml
      - name: Version
        value: $[ stageDependencies.Initialize.Initialize.outputs['Version.Version'] ]
      jobs:
      - template: /eng/pipelines/templates/jobs/sign-and-pack.yml
        parameters:
          SkipSigning: ${{ parameters.SkipSigning }}

    - ${{ if eq(parameters.PublishPackages, 'true') }}:
      - ${{ if eq(parameters.ReleaseRun, 'true') }}:
        - stage: Release
          dependsOn:
          - Initialize
          - SignAndPack
          pool:
            name: $(LINUXPOOL)
            image: $(LINUXVMIMAGE)
            os: linux
          variables:
          - template: /eng/pipelines/templates/variables/image.yml
          - template: /eng/pipelines/templates/variables/globals.yml
          - name: Version
            value: $[ stageDependencies.Initialize.Initialize.outputs['Version.Version'] ]
          jobs:
          - template: /eng/pipelines/templates/jobs/release.yml

      - ${{ else }}:
        - stage: Integration
          dependsOn:
          - Initialize
          - SignAndPack
          pool:
            name: $(LINUXPOOL)
            image: $(LINUXVMIMAGE)
            os: linux
          variables:
          - template: /eng/pipelines/templates/variables/image.yml
          - template: /eng/pipelines/templates/variables/globals.yml
          - name: Version
            value: $[ stageDependencies.Initialize.Initialize.outputs['Version.Version'] ]
          jobs:
          - template: /eng/pipelines/templates/jobs/integration.yml
