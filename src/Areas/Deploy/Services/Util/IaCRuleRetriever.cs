using AzureMcp.Areas.Deploy.Models;

namespace AzureMcp.Areas.Deploy.Services.Util;

public static class InfraCodeRuleRetriever
{
    public static void PopulateAZDPrompts(string iacType, string[] resourceTypes, List<string> llmResponse)
    {
        llmResponse.Add("- Ensure an User-Assigned Managed Identity exists.");
        llmResponse.Add("- Resource Group resource (if exists) must have tag \"azd-env-name\" = environmentName. Apply this tag to resource group resource ONLY.");
        llmResponse.Add($"- Expected parameters in {iacType} parameters: environmentName='${{AZURE_ENV_NAME}}', location='${{AZURE_LOCATION}}'. resourceGroupName='rg-${{AZURE_ENV_NAME}}' is required if scope is subscription.");
        llmResponse.Add("- All container apps, app services, function apps, static web apps (and nothing else) must have tag \"azd-service-name\" matching the service name in azure.yaml.");

        var outputsFileName = iacType == IacType.Bicep ? "main.bicep" : "outputs.tf";
        llmResponse.Add($"- Expected output in {outputsFileName}: RESOURCE_GROUP_ID.");
        if (resourceTypes.Contains(AzureServiceNames.AzureContainerApp))
        {
            llmResponse.Add($"- Expected output in {outputsFileName}: AZURE_CONTAINER_REGISTRY_ENDPOINT representing the URI of the container registry endpoint.");
        }
    }

    public static void PopulateAzCliPrompts(List<string> llmResponse)
    {
        // TODO: Enrich Me
        llmResponse.Add("- No additional rules.");
    }

    public static void PopulateBicepPrompts(List<string> llmResponse)
    {
        llmResponse.Add("- Expected files: main.bicep, main.parameters.json (with parameters from main.bicep).");
        llmResponse.Add("- Resource token format: 'uniqueString(subscription().id, resourceGroup().id, location, environmentName)' (scope = resourceGroup) or 'uniqueString(subscription().id, location, environmentName)' (scope = subscription).");
        llmResponse.Add("- All resources should be named like az{resourcePrefix}{resourceToken}, where resourcePrefix is a prefix for the resource (ex. 'kv' for key vault) and <= 3 characters. Alphanumeric only. ResourceToken is the string generated by uniqueString as per earlier.");
    }

    public static void PopulateTerraformPrompts(List<string> llmResponse)
    {
        llmResponse.Add("- Expected files: main.tf, main.tfvars.json (with the minimally required parameters), outputs.tf.");
        llmResponse.Add("- Resource names should use Azure CAF naming convention. This is required for deployments. Add aztfmod/azurecaf in the required provider. DO NOT use random_length. NO suffixes needed.");
    }

    public static string AddPromptForRoleAssignment(string roleId, string roleName, string iacType, string? additionalInstructions = null)
    {
        var roleAssignmentResourceName = iacType == IacType.Bicep ? "Microsoft.Authorization/roleAssignments" : "azurerm_role_assignment";

        var returnString = $"- MANDATORY: Add a {roleAssignmentResourceName} resource to assign the {roleName} ({roleId}) role to the user-assigned managed identity";

        if (!string.IsNullOrEmpty(additionalInstructions))
        {
            returnString += $" ({additionalInstructions})";
        }

        return returnString;
    }

    public static void PopulateContainerAppPrompts(string iacType, List<string> llmResponse)
    {
        llmResponse.Add("=== Additional requirements for Container Apps:");
        llmResponse.Add("- Attach User-Assigned Managed Identity.");
        llmResponse.Add(AddPromptForRoleAssignment("7f951dda-4ed3-4680-a7ca-43fe172d538d", "AcrPull", iacType, "Only one instance is required per-container registry. Define this BEFORE any container apps."));
        llmResponse.Add("- Use this identity (NOT system) to connect to the container registry. A registry connection needs to be created even if we are using a template base image.");

        const string image = "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest";
        var imageProperty = iacType == IacType.Bicep ? "properties.template.containers.image" : "azurerm_container_app.template.container.image";
        llmResponse.Add($"- Container Apps MUST use base container image {image}. The property is set via {imageProperty}.");

        if (iacType == IacType.Bicep)
        {
            llmResponse.Add("- Enable CORS via properties.configuration.ingress.corsPolicy.");
        }
        else if (iacType == IacType.Terraform)
        {
            llmResponse.Add("- Create an ***azapi_resource_action*** resource using :type `Microsoft.App/containerApps`, method `PATCH`, and body `properties.configuration.ingress.corsPolicy` property to enable CORS for all origins, headers, and methods. Use 'azure/azapi' provider version *2.0*. DO NOT use jsonencode() for the body.");
        }

        llmResponse.Add("- Define all used secrets; Use Key Vault if possible.");

        if (iacType == IacType.Bicep)
        {
            llmResponse.Add("- Container App Environment must be connected to Log Analytics Workspace. Use logAnalyticsConfiguration -> customerId=logAnalytics.properties.customerId and sharedKey=logAnalytics.listKeys().primarySharedKey.");
        }
        else
        {
            llmResponse.Add("- Container App Environment must be connected to Log Analytics Workspace. Use logs_destination=\"log-analytics\" azurerm_container_app_environment.log_analytics_workspace_id = azurerm_log_analytics_workspace.<workspaceName>.id.");
        }
        llmResponse.Add("===");
    }

    public static void PopulateFunctionAppPrompts(string iacType, List<string> llmResponse)
    {
        llmResponse.Add("=== Additional requirements for Function Apps:");
        llmResponse.Add("- Attach User-Assigned Managed Identity.");

        var requiredRoles = new[]
        {
            new { RoleId = "b7e6dc6d-f1e8-4753-8033-0f276bb0955b", Name = "Storage Blob Data Owner" },
            new { RoleId = "ba92f5b4-2d11-453d-a403-e96b0029c9fe", Name = "Storage Blob Data Contributor" },
            new { RoleId = "974c5e8b-45b9-4653-ba55-5f855dd0fb88", Name = "Storage Queue Data Contributor" },
            new { RoleId = "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3", Name = "Storage Table Data Contributor" },
            new { RoleId = "3913510d-42f4-4e42-8a64-420c390055eb", Name = "Monitoring Metrics Publisher" }
        };

        foreach (var role in requiredRoles)
        {
            llmResponse.Add(AddPromptForRoleAssignment(role.RoleId, role.Name, iacType));
        }

        llmResponse.Add("- Create a storage account and connect to the function app.");

        var diagnosticSettingsResourceType = iacType == IacType.Bicep ? "Microsoft.Insights/diagnosticSettings" : "azurerm_monitor_diagnostic_setting";
        llmResponse.Add($"Define diagnostic settings to save logs. The resource type is {diagnosticSettingsResourceType}.");
        llmResponse.Add("===");
    }

    public static void PopulateAppServiceIaCPrompts(string iacType, List<string> llmResponse)
    {
        llmResponse.Add("App Service Rules:");
        llmResponse.Add("- App Service must be configured with appropriate settings.");
    }

    public static List<string> GetIaCRules(string deploymentTool, string iacType, string[] resourceTypes)
    {
        var llmResponse = new List<string>
        {
            $"Mandatory rules for deployment. You must implement every rule exactly as stated, with no exceptions or omissions, even if it is not a common pattern or seems redundant. Do not use your own judgment to simplify, skip, or modify any rule. If a rule is present, it must be enforced in the code, regardless of context. Adjust {iacType} files to align with these rules.",
            $"Deployment Tool {deploymentTool} rules:"
        };

        if (deploymentTool.Equals(DeploymentTool.Azd, StringComparison.OrdinalIgnoreCase))
        {
            PopulateAZDPrompts(iacType, resourceTypes, llmResponse);
        }
        else if (deploymentTool.Equals(DeploymentTool.AzCli, StringComparison.OrdinalIgnoreCase))
        {
            PopulateAzCliPrompts(llmResponse);
        }

        llmResponse.Add($"IaC Type: {iacType} rules:");

        if (iacType == IacType.Bicep)
        {
            PopulateBicepPrompts(llmResponse);
        }
        else if (iacType == IacType.Terraform)
        {
            PopulateTerraformPrompts(llmResponse);
        }

        llmResponse.Add($"Resources: {string.Join(", ", resourceTypes)}");

        if (resourceTypes.Contains(AzureServiceNames.AzureContainerApp))
        {
            PopulateContainerAppPrompts(iacType, llmResponse);
        }

        if (resourceTypes.Contains(AzureServiceNames.AzureAppService))
        {
            PopulateAppServiceIaCPrompts(iacType, llmResponse);
        }

        if (resourceTypes.Contains(AzureServiceNames.AzureFunctionApp))
        {
            PopulateFunctionAppPrompts(iacType, llmResponse);
        }

        llmResponse.Add($"Call get_errors every time you make code changes, otherwise your deployment will fail. You must follow ALL of the previously mentioned rules. DO NOT IGNORE ANY RULES. Call this tool again if need to get the rules again. Show the user a report line-by-line of each rule that was applied. Only skip a rule if there is no corresponding resource (e.g. no function app). Do not stop at error-free code, you must apply all the rules.");

        var necessaryTools = new List<string> { "az cli (az --version)" };

        if (deploymentTool == DeploymentTool.Azd)
        {
            necessaryTools.Add("azd (azd --version)");
        }

        if (resourceTypes.Contains(AzureServiceNames.AzureContainerApp))
        {
            necessaryTools.Add("docker (docker --version)");
        }

        llmResponse.Add($"Tools needed: {string.Join(",", necessaryTools)}.");

        if (iacType == IacType.Terraform && deploymentTool == DeploymentTool.Azd)
        {
            llmResponse.Add("Note: Do not use Terraform CLI.");
        }

        return llmResponse;
    }
}
