Azure Functions code generation best practices:
    - Use the latest programming models (v4 for JavaScript, v2 for Python) 
    - If the project runtime is Python or Node.js, do not create a function.json file
    - Only If the project runtime is .NET, PowerShell or Java create a function.json file with the required bindings and triggers.
    - Use this extension bundles version `[4.*, 5.0.0)` in the host.json file.
    - Use Azure Functions Core Tools for creating Function Apps
    - Blob triggers should use eventgrid source
    - Generate local.settings.json during setup to manage configuration settings locally
    - Ensure the Function App is configured to use Functions Host v4
    - Prefer extension bundles over SDKs for bindings to simplify dependency management. Use the latest extension bundles available
    - For .NET Functions, use the latest SDKs and prefer the isolated process model over in-process
    - For Durable Functions, use the Durable Task Framework (DTS) for best performance and throughput
    - Let the user choose Function auth level
    - Use the latest language runtime version
    - Provide steps for testing Functions locally after code generation to ensure functionality and correctness. 
