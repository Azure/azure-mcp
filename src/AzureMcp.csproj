<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Version>0.4.2</Version>
    <OutputType>Exe</OutputType>
    <CliName>azmcp</CliName>
    <AssemblyName>$(CliName)</AssemblyName>
    <AssemblyTitle>Azure MCP Server</AssemblyTitle>
    <RootNamespace>AzureMcp</RootNamespace>

    <!-- Publishing settings -->
    <IsAotCompatible>true</IsAotCompatible>
    <PublishSingleFile>false</PublishSingleFile>
    <PublishSelfContained>true</PublishSelfContained>
    <PublishReadyToRun>false</PublishReadyToRun>
    <PublishTrimmed>false</PublishTrimmed>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <DebugType>embedded</DebugType>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <CopyOutputSymbolsToPublishDirectory>false</CopyOutputSymbolsToPublishDirectory>

    <!-- Multi-platform support - keep these aligned with the NPM publishing scripts -->
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>

    <!-- .NET Tool Package settings -->
    <!-- Bug in 10p6: if this is set to true it prevents 'normal' publishes
         from generating apphosts. Workaround: set -p PackAsTool=true when
         calling 'dotnet pack'.
         See https://github.com/dotnet/sdk/issues/49799 for details. -->
    <!-- <PackAsTool>true</PackAsTool> -->
    <!-- Work around p6 bug by only setting the McpServer package type on the top-level wrapper package.
         Already fixed in p7. -->
    <PackageType Condition="'$(RuntimeIdentifier)' == ''">McpServer</PackageType>
    <PackageId>Azure.Mcp</PackageId>
    <PackageReadmeFile Condition="'$(RuntimeIdentifier)' == ''">README.md</PackageReadmeFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <McpServerJsonTemplateFile>server.json</McpServerJsonTemplateFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>azure;mcp;</PackageTags>
    <PackageReleaseNotes Condition="'$(RuntimeIdentifier)' == ''">$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)/../CHANGELOG.md').TrimEnd())</PackageReleaseNotes>
    <ToolCommandName>$(CliName)</ToolCommandName>
    <PackageDescription Condition="'$(RuntimeIdentifier)' == ''">Azure MCP Server - Model Context Protocol implementation for Azure</PackageDescription>
    <PackageDescription Condition="'$(RuntimeIdentifier)' != ''">Azure MCP Server - Model Context Protocol implementation for Azure. Internal implementation package for $(RuntimeIdentifier).</PackageDescription>

    <!-- Suppress SYSLIB0020 for generated System.Text.Json code that uses obsolete IgnoreNullValues -->
    <!-- Suppress NU5104 to allow a stable package version with prerelease dependencies -->
    <NoWarn>$(NoWarn);SYSLIB0020;NU5104</NoWarn>
  </PropertyGroup>

  <!-- AOT compilation flags -->
  <PropertyGroup>
    <IlcFoldIdenticalMethodBodies>true</IlcFoldIdenticalMethodBodies>
  </PropertyGroup>

  <!-- Debug configuration -->
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <PublishSingleFile>false</PublishSingleFile>
    <SelfContained>false</SelfContained>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <ItemGroup>
    <RuntimeHostConfigurationOption Include="Azure.Experimental.EnableActivitySource" Value="true" />
  </ItemGroup>

  <!-- These items only need to be in the top-level wrapper tool package -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == ''">
    <None Include="../README.dotnet.md" Pack="true" PackagePath="/README.md" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Azure.AI.Projects" />
    <PackageReference Include="Azure.Bicep.Types" />
    <PackageReference Include="Azure.Bicep.Types.Az" />
    <PackageReference Include="Azure.Core" />
    <PackageReference Include="Azure.Data.AppConfiguration" />
    <PackageReference Include="Azure.Identity" />
    <PackageReference Include="Azure.Data.Tables" />
    <PackageReference Include="Azure.Developer.LoadTesting" />
    <PackageReference Include="Azure.Identity.Broker" />
    <PackageReference Include="Azure.Messaging.ServiceBus" />
    <PackageReference Include="Azure.Monitor.Query" />
    <PackageReference Include="Azure.ResourceManager.AppConfiguration" />
    <PackageReference Include="Azure.ResourceManager.Authorization" />
    <PackageReference Include="Azure.ResourceManager.ContainerService" />
    <PackageReference Include="Azure.ResourceManager.CognitiveServices" />
    <PackageReference Include="Azure.ResourceManager.Kusto" />
    <PackageReference Include="Azure.ResourceManager.PostgreSql" />
    <PackageReference Include="Azure.ResourceManager.Redis" />
    <PackageReference Include="Azure.ResourceManager.RedisEnterprise" />
    <PackageReference Include="Azure.ResourceManager.LoadTesting" />
    <PackageReference Include="Azure.ResourceManager.Sql" />
    <PackageReference Include="Azure.Security.KeyVault.Keys" />
    <PackageReference Include="Azure.Security.KeyVault.Secrets" />
    <PackageReference Include="Azure.Storage.Blobs" />
    <PackageReference Include="Azure.Storage.Files.DataLake" />
    <PackageReference Include="Azure.ResourceManager.CosmosDB" />
    <PackageReference Include="Azure.ResourceManager.Grafana" />
    <PackageReference Include="Azure.ResourceManager.OperationalInsights" />
    <PackageReference Include="Azure.ResourceManager.Search" />
    <PackageReference Include="Azure.ResourceManager.Storage" />
    <PackageReference Include="Azure.ResourceManager.Datadog" />
    <PackageReference Include="Microsoft.Identity.Client.Broker" />
    <PackageReference Include="ModelContextProtocol" />
    <PackageReference Include="Microsoft.Extensions.Caching.Memory" />
    <PackageReference Include="Microsoft.Azure.Cosmos" GeneratePathProperty="true" ExcludeAssets="native" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Newtonsoft.Json" />
    <PackageReference Include="Npgsql" />
    <PackageReference Include="System.CommandLine" />
    <PackageReference Include="System.Formats.Asn1" />
    <PackageReference Include="System.Linq.AsyncEnumerable" />
    <PackageReference Include="System.Net.ServerSentEvents" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" />
    <PackageReference Include="Azure.Monitor.OpenTelemetry.AspNetCore" />
    <PackageReference Include="Microsoft.Extensions.Azure" />
	<PackageReference Include="Azure.Search.Documents" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Areas\AzureTerraformBestPractices\Resources\terraform-best-practices-for-azure.txt" />
    <EmbeddedResource Include="Areas\AzureBestPractices\Resources\azure-best-practices.txt" />
    <EmbeddedResource Include="Areas\AzureBestPractices\Resources\azure-functions-deployment-best-practices.txt" />
    <EmbeddedResource Include="Areas\AzureBestPractices\Resources\azure-functions-codegen-best-practices.txt" />
    <EmbeddedResource Include="Areas\Extension\Resources\azd-best-practices.txt" />
    <EmbeddedResource Include="Areas\Server\Resources\registry.json" />
  </ItemGroup>

  <!-- Remove Cosmos native files from the build output directory -->
  <Target Name="RemoveCosmosNativeFiles" BeforeTargets="Build">
    <ItemGroup>
      <FilesToRemove Include="@(ContentWithTargetPath)" Condition="$([System.String]::Copy(`%(FullPath)`).Contains(`$(PkgMicrosoft_Azure_Cosmos)`))" />
    </ItemGroup>
    <ItemGroup>
      <ContentWithTargetPath Remove="@(FilesToRemove)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <_PaddedPackageTypes>;$(PackageType)</_PaddedPackageTypes>
    <_HasMcpServerPackageType Condition="$(_PaddedPackageTypes.ToLowerInvariant().Contains(';mcpserver'))">true</_HasMcpServerPackageType>
    <_HasMcpServerJsonTemplate Condition="'$(McpServerJsonTemplateFile)' != '' and Exists('$(McpServerJsonTemplateFile)')">true</_HasMcpServerJsonTemplate>
    <_ShouldUpdateServerJsonForPackaging Condition="'$(_HasMcpServerPackageType)' == 'true' and '$(_HasMcpServerJsonTemplate)' == 'true'">true</_ShouldUpdateServerJsonForPackaging>
  </PropertyGroup>

  <Target
    Name="UpdateServerJsonForPackaging"
    DependsOnTargets="_InitializeNuspecRepositoryInformationProperties"
    BeforeTargets="GenerateNuspec;_GetPackageFiles"
    Outputs="@(_UpdatedServerJsonPath)"
    Condition="'$(_ShouldUpdateServerJsonForPackaging)' == 'true'">
    
    <PropertyGroup>
      <_UpdatedServerJsonPath>$(IntermediateOutputPath).mcp\server.json</_UpdatedServerJsonPath>
      <_McpServerJsonFileContent>$([System.IO.File]::ReadAllText($(McpServerJsonTemplateFile)))</_McpServerJsonFileContent>
    </PropertyGroup>

    <!-- Maybe this can be done in a more generic way. -->
    <PropertyGroup>
      <_McpServerJsonFileContent>$(_McpServerJsonFileContent
        .Replace('%24(PackageId)', '$(PackageId)')
        .Replace('%24(PackageVersion)', '$(PackageVersion)')
        .Replace('%24(PackageDescription)', '$(PackageDescription)')
        .Replace('%24(RepositoryUrl)', '$(RepositoryUrl)'))</_McpServerJsonFileContent>
    </PropertyGroup>

    <ItemGroup>
      <_McpServerJsonFileContentLine Include="$(_McpServerJsonFileContent)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(_UpdatedServerJsonPath)"
      Lines="@(_McpServerJsonFileContentLine)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />
      
    <ItemGroup>
      <ItemWrites Include="$(_UpdatedServerJsonPath)" />
    </ItemGroup>

    <ItemGroup>
      <None Include="$(_UpdatedServerJsonPath)" Pack="true" PackagePath="/.mcp/server.json" />
    </ItemGroup>
    
  </Target>

  <PropertyGroup>
    <TrimmerSingleWarn>false</TrimmerSingleWarn>
  </PropertyGroup>
</Project>
