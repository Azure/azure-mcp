<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <CliName>azmcp</CliName>
    <AssemblyName>$(CliName)</AssemblyName>
    <AssemblyTitle>Azure MCP Server</AssemblyTitle>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <!-- Publishing settings -->
    <IsAotCompatible>true</IsAotCompatible>
    <PublishSingleFile>false</PublishSingleFile>
    <SelfContained>false</SelfContained>
    <PublishReadyToRun>false</PublishReadyToRun>
    <PublishTrimmed>false</PublishTrimmed>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <DebugType>embedded</DebugType>
  </PropertyGroup>
  <!-- Enable Trim and AOT Analyzers -->
  <PropertyGroup>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
    <TrimmerSingleWarn>false</TrimmerSingleWarn>
    <SuppressTrimAnalysisWarnings>false</SuppressTrimAnalysisWarnings>
    <!-- Suppress IL3000 warning in Microsoft.Identity.Client.NativeInterop -->
    <NoWarn>$(NoWarn);IL3000</NoWarn>
  </PropertyGroup>

  <!-- AOT native build flags -->
  <PropertyGroup Condition="'$(BuildNative)' == 'true'">
    <IsAotCompatible>true</IsAotCompatible>
    <PublishAot>true</PublishAot>
    <PublishTrimmed>true</PublishTrimmed>
    <TrimMode>full</TrimMode>
    <SelfContained>true</SelfContained>
    <IlcOptimizationPreference>Size</IlcOptimizationPreference>
    <IlcFoldIdenticalMethodBodies>true</IlcFoldIdenticalMethodBodies>
    <CopyOutputSymbolsToPublishDirectory>false</CopyOutputSymbolsToPublishDirectory>
    <!-- Multi-platform support - keep these aligned with the NPM publishing scripts -->
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
  </PropertyGroup>
  <!-- .NET Tool Package settings -->
  <PropertyGroup>
    <!-- Directory.Build.props in this repo sets this to false - but we _want_ to make a package here! -->
    <IsPackable>true</IsPackable>
    <PackAsTool>true</PackAsTool> 
    <!-- Work around p6 bug by only setting the McpServer package type on the top-level wrapper package. 
         Already fixed in p7. -->
    <PackageType Condition="'$(RuntimeIdentifier)' == ''">McpServer</PackageType>
    <PackageId>Azure.Mcp</PackageId>
    <PackageReadmeFile Condition="'$(RuntimeIdentifier)' == ''">README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>azure;mcp;</PackageTags>
    <PackageReleaseNotes Condition="'$(RuntimeIdentifier)' == ''">$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)/../../../CHANGELOG.md').TrimEnd())</PackageReleaseNotes>
    <ToolCommandName>$(CliName)</ToolCommandName>
    <PackageDescription Condition="'$(RuntimeIdentifier)' == ''">Azure MCP Server - Model Context Protocol implementation for Azure</PackageDescription>
    <PackageDescription Condition="'$(RuntimeIdentifier)' != ''">Azure MCP Server - Model Context Protocol implementation for Azure. Internal implementation package for $(RuntimeIdentifier).</PackageDescription>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <McpServerJsonTemplateFile>server.json</McpServerJsonTemplateFile>
  </PropertyGroup>
  <!-- Debug configuration -->
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <PublishSingleFile>false</PublishSingleFile>
    <SelfContained>false</SelfContained>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\AzureMcp.Core\AzureMcp.Core.csproj" />
    <ProjectReference Include="..\..\..\areas\*\src\**\AzureMcp.*.csproj" />
  </ItemGroup>
  <ItemGroup>
    <!-- We need a package reference for Cosmos so we have a path to the native assets for exclusion later -->
    <PackageReference Include="Microsoft.Azure.Cosmos" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="ModelContextProtocol" />
    <PackageReference Include="System.CommandLine" />
  </ItemGroup>
  <!-- These items only need to be in the top-level wrapper tool package -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == ''">
    <!-- TODO: Change the content of the README automatically to point to dnx-based usages and package names? 
               Could use the target below that templates the mcp server.json as a guideline. -->
    <None Include="../../../README.md" Pack="true" PackagePath="./README.md" />
  </ItemGroup>

  <!-- Remove non-AOT safe projects and packages when building native -->
  <!-- https://github.com/Azure/azure-mcp-pr/issues/318 -->
  <ItemGroup Condition="'$(BuildNative)' == 'true'">
    <ProjectReference Remove="..\..\..\areas\acr\src\AzureMcp.Acr\AzureMcp.Acr.csproj" />
    <ProjectReference Remove="..\..\..\areas\bicepschema\src\AzureMcp.BicepSchema\AzureMcp.BicepSchema.csproj" />
    <ProjectReference Remove="..\..\..\areas\cosmos\src\AzureMcp.Cosmos\AzureMcp.Cosmos.csproj" />
    <ProjectReference Remove="..\..\..\areas\monitor\src\AzureMcp.Monitor\AzureMcp.Monitor.csproj" />
    <ProjectReference Remove="..\..\..\areas\postgres\src\AzureMcp.Postgres\AzureMcp.Postgres.csproj" />
    <ProjectReference Remove="..\..\..\areas\search\src\AzureMcp.Search\AzureMcp.Search.csproj" />
    <ProjectReference Remove="..\..\..\areas\virtualdesktop\src\AzureMcp.VirtualDesktop\AzureMcp.VirtualDesktop.csproj" />
    <PackageReference Remove="Microsoft.Azure.Cosmos" />
  </ItemGroup>

  <!-- Remove Cosmos native files from the build output directory -->
  <Target Name="RemoveCosmosNativeFiles" BeforeTargets="GetCopyToOutputDirectoryItems">
    <ItemGroup>
      <FilesToRemove Include="@(ContentWithTargetPath)" Condition="$([System.String]::new('%(FullPath)').Contains('$(PkgMicrosoft_Azure_Cosmos)'))" />
    </ItemGroup>
    <ItemGroup>
      <ContentWithTargetPath Remove="@(FilesToRemove)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <_PaddedPackageTypes>;$(PackageType)</_PaddedPackageTypes>
    <_HasMcpServerPackageType Condition="$(_PaddedPackageTypes.ToLowerInvariant().Contains(';mcpserver'))">true</_HasMcpServerPackageType>
    <_HasMcpServerJsonTemplate Condition="'$(McpServerJsonTemplateFile)' != '' and Exists('$(McpServerJsonTemplateFile)')">true</_HasMcpServerJsonTemplate>
    <_ShouldUpdateServerJsonForPackaging Condition="'$(_HasMcpServerPackageType)' == 'true' and '$(_HasMcpServerJsonTemplate)' == 'true'">true</_ShouldUpdateServerJsonForPackaging>
  </PropertyGroup>

  <Target
    Name="UpdateServerJsonForPackaging"
    DependsOnTargets="_InitializeNuspecRepositoryInformationProperties"
    BeforeTargets="GenerateNuspec;_GetPackageFiles"
    Outputs="@(_UpdatedServerJsonPath)"
    Condition="'$(_ShouldUpdateServerJsonForPackaging)' == 'true'">
    
    <PropertyGroup>
      <_UpdatedServerJsonPath>$(IntermediateOutputPath).mcp\server.json</_UpdatedServerJsonPath>
      <_McpServerJsonFileContent>$([System.IO.File]::ReadAllText($(McpServerJsonTemplateFile)))</_McpServerJsonFileContent>
    </PropertyGroup>

    <!-- Maybe this can be done in a more generic way. -->
    <PropertyGroup>
      <_McpServerJsonFileContent>$(_McpServerJsonFileContent
        .Replace('%24(PackageId)', '$(PackageId)')
        .Replace('%24(PackageVersion)', '$(PackageVersion)')
        .Replace('%24(PackageDescription)', '$(PackageDescription)')
        .Replace('%24(RepositoryUrl)', '$(RepositoryUrl)'))</_McpServerJsonFileContent>
    </PropertyGroup>

    <ItemGroup>
      <_McpServerJsonFileContentLine Include="$(_McpServerJsonFileContent)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(_UpdatedServerJsonPath)"
      Lines="@(_McpServerJsonFileContentLine)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />
      
    <ItemGroup>
      <ItemWrites Include="$(_UpdatedServerJsonPath)" />
    </ItemGroup>

    <ItemGroup>
      <None Include="$(_UpdatedServerJsonPath)" Pack="true" PackagePath="/.mcp/server.json" />
    </ItemGroup>
    
  </Target>
</Project>
