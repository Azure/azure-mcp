{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { spawn, ChildProcess } from 'child_process';\n\nlet mcpServerProcess: ChildProcess | undefined;\n\nfunction startMcpServerFromConfig(mcpConfigPath: string) {\n    // Kill previous process if running\n    if (mcpServerProcess) {\n        mcpServerProcess.kill();\n        mcpServerProcess = undefined;\n    }\n    try {\n        const configRaw = fs.readFileSync(mcpConfigPath, { encoding: 'utf8' });\n        const config = JSON.parse(configRaw);\n        const serverConfig = config?.servers?.[\"azure-mcp-server\"];\n        if (serverConfig && serverConfig.command) {\n            mcpServerProcess = spawn(serverConfig.command, serverConfig.args || [], { stdio: 'pipe' });\n            mcpServerProcess.stdout?.on('data', (data) => {\n                console.log(`[MCP Server]: ${data}`);\n            });\n            mcpServerProcess.stderr?.on('data', (data) => {\n                console.error(`[MCP Server ERROR]: ${data}`);\n            });\n            mcpServerProcess.on('exit', (code) => {\n                console.log(`MCP Server exited with code ${code}`);\n            });\n            vscode.window.showInformationMessage('Azure MCP server started automatically.');\n        } else {\n            vscode.window.showErrorMessage('azure-mcp-server config not found in mcp.json.');\n        }\n    } catch (err: any) {\n        vscode.window.showErrorMessage('Failed to start Azure MCP server: ' + err.message);\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    // Write .vscode/mcp.json config in the workspace\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (workspaceFolders && workspaceFolders.length > 0) {\n        const workspacePath = workspaceFolders[0].uri.fsPath;\n        const vscodeDir = path.join(workspacePath, '.vscode');\n        if (!fs.existsSync(vscodeDir)) {\n            fs.mkdirSync(vscodeDir);\n        }\n        let folder = '';\n        let binary = '';\n        if (process.platform === 'win32') {\n            folder = 'win-x64';\n            binary = 'azmcp.exe';\n        } else if (process.platform === 'darwin') {\n            folder = 'osx-x64';\n            binary = 'azmcp';\n        } else if (process.platform === 'linux') {\n            folder = 'linux-x64';\n            binary = 'azmcp';\n        }\n        const serverPath = path.join(context.extensionPath, 'server', folder, binary);\n        const mcpConfig = {\n            servers: {\n                \"azure-mcp-server\": {\n                    type: \"stdio\",\n                    command: serverPath,\n                    args: [\"server\", \"start\"],\n                }\n            }\n        };\n        vscode.commands.executeCommand('mcp.addServer', {\n            name: 'azure-mcp-server',\n            type: 'stdio',\n            command: serverPath,\n            args: ['server', 'start']\n        });\n        // const mcpConfigPath = path.join(vscodeDir, 'mcp.json');\n        // fs.writeFileSync(mcpConfigPath, JSON.stringify(mcpConfig, null, 2), { encoding: 'utf8' });\n        vscode.window.showInformationMessage('.vscode/mcp.json has been written for Azure MCP server.');\n\n\n\n        // // Auto-start the MCP server from the config\n        // startMcpServerFromConfig(mcpConfigPath);\n    }\n}\n\nexport function deactivate() {\n    if (mcpServerProcess) {\n        mcpServerProcess.kill();\n        mcpServerProcess = undefined;\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,WAAsB;AACtB,SAAoB;AAIpB,IAAI;AAgCG,SAAS,SAAS,SAAkC;AAEvD,QAAM,mBAA0B,iBAAU;AAC1C,MAAI,oBAAoB,iBAAiB,SAAS,GAAG;AACjD,UAAM,gBAAgB,iBAAiB,CAAC,EAAE,IAAI;AAC9C,UAAM,YAAiB,UAAK,eAAe,SAAS;AACpD,QAAI,CAAI,cAAW,SAAS,GAAG;AAC3B,MAAG,aAAU,SAAS;AAAA,IAC1B;AACA,QAAI,SAAS;AACb,QAAI,SAAS;AACb,QAAI,QAAQ,aAAa,SAAS;AAC9B,eAAS;AACT,eAAS;AAAA,IACb,WAAW,QAAQ,aAAa,UAAU;AACtC,eAAS;AACT,eAAS;AAAA,IACb,WAAW,QAAQ,aAAa,SAAS;AACrC,eAAS;AACT,eAAS;AAAA,IACb;AACA,UAAM,aAAkB,UAAK,QAAQ,eAAe,UAAU,QAAQ,MAAM;AAC5E,UAAM,YAAY;AAAA,MACd,SAAS;AAAA,QACL,oBAAoB;AAAA,UAChB,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,CAAC,UAAU,OAAO;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,IAAO,gBAAS,eAAe,iBAAiB;AAAA,MAC5C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM,CAAC,UAAU,OAAO;AAAA,IAC5B,CAAC;AAGD,IAAO,cAAO,uBAAuB,yDAAyD;AAAA,EAMlG;AACJ;AAEO,SAAS,aAAa;AACzB,MAAI,kBAAkB;AAClB,qBAAiB,KAAK;AACtB,uBAAmB;AAAA,EACvB;AACJ;",
  "names": []
}
