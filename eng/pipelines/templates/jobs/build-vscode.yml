parameters:
# required matrix parameters
- name: UsePlatformContainer
  type: boolean
- name: OSName
  type: string
- name: Matrix
  type: object
- name: DependsOn
  type: string
- name: CloudConfig
  type: object
- name: TestTimeoutInMinutes
  type: number
- name: SkipSigning
  type: boolean
  default: false

jobs:
- job: Build_${{ parameters.OSName }}
  displayName: "Build"
  dependsOn:
  - ${{ parameters.DependsOn }}
  strategy:
    matrix: $[ ${{ parameters.Matrix }} ]
  pool:
    name: $(Pool)
    ${{ if eq(parameters.OSName, 'macOS') }}:
      vmImage: $(OSVmImage)
    ${{ else }}:
      image: $(OSVmImage)
    os: ${{ parameters.OSName }}
  steps:
  - checkout: self

  - ${{ if not(parameters.SkipSigning) }}:
    # Download the signed MCP server binaries for this OS
    - download: current
      artifact: $(PipelineArtifactName)_signed
      displayName: "Download signed MCP server binaries"

    # Copy binaries to ext/vscode/server/<os>
    - ${{ if eq(parameters.OSName, 'windows') }}:
        - powershell: |
            $arch = "$(Architecture)"
            $src = "$(Pipeline.Workspace)/$(PipelineArtifactName)_signed/win-$arch/dist/*"
            $dest = "ext/vscode/server"
            New-Item -ItemType Directory -Force -Path $dest
            Copy-Item -Path $src -Destination $dest -Recurse -Force
          displayName: "Copy signed MCP server binaries to VSIX (Windows)"
    - ${{ if eq(parameters.OSName, 'linux') }}:
        - bash: |
            arch="$(Architecture)"
            mkdir -p ext/vscode/server/linux
            cp -r $(Pipeline.Workspace)/$(PipelineArtifactName)_signed/linux-$arch/dist/* ext/vscode/server/
          displayName: "Copy signed MCP server binaries to VSIX (Linux)"
    - ${{ if eq(parameters.OSName, 'macOS') }}:
        - bash: |
            arch="$(Architecture)"
            mkdir -p ext/vscode/server/macos
            cp -r $(Pipeline.Workspace)/$(PipelineArtifactName)_signed/osx-$arch/dist/* ext/vscode/server/
          displayName: "Copy signed MCP server binaries to VSIX (macOS)"

  # --- VS Code Extension Packaging Steps ---
  - task: NodeTool@0
    displayName: "Use Node.js 20.x"
    inputs:
      versionSpec: 20.x

  - bash: |
      npm install -g npm vsce
      npm ci --no-optional
    displayName: "Install npm dependencies and vsce"
    workingDirectory: ext/vscode

  - pwsh: ./ci-package.ps1 -os '${{ parameters.OSName }}_$(Architecture)'
    workingDirectory: ext/vscode
    displayName: "Package VS Code Extension"

  - pwsh: |
      New-Item -ItemType Directory -Path packaged -Force
      Copy-Item ext/vscode/*.vsix -Destination packaged -Force
    displayName: Copy VSIX for publishing
    condition: always()

  - task: ComponentGovernanceComponentDetection@0
    displayName: "Component Governance Detection"

  # Publish the VSIX extension artifact using 1ES-compliant template
  - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
    parameters:
      ArtifactPath: packaged
      ArtifactName: vsix_package_$(System.JobName)
      SbomEnabled: ${{ ne(variables['Build.Reason'], 'PullRequest') }}